{
	"info": {
		"_postman_id": "c2ad5baf-1925-4fd8-9466-a3b6555e2688",
		"name": "Pesquisar SubCategorias Mariana",
		"schema": "https://schema.getpostman.com/json/collection/v2.1.0/collection.json",
		"_exporter_id": "27453442"
	},
	"item": [
		{
			"name": "Pesquisar subcategoria respeitando os critérios de aceite",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"//Para validar o status code\r",
							"\r",
							"pm.test(\"Validando o Status code\", function () {\r",
							"    pm.response.to.have.status(200);\r",
							"});\r",
							"\r",
							"\r",
							"\r",
							"\r",
							"//validação correta do texto string 2000 milisegundos\r",
							"pm.test(\"Response time is less than 2000ms\", function () {\r",
							"pm.expect(pm.response.responseTime).to.be.below(2000);\r",
							"\r",
							"\r",
							"//validação para ver se apresenra a mensagem que ultrapassou o limite de caracteres\r",
							"  \r",
							"});"
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "GET",
				"header": [],
				"url": {
					"raw": "{{URLSubcategMari}}",
					"host": [
						"{{URLSubcategMari}}"
					]
				}
			},
			"response": []
		},
		{
			"name": "Excedendo o limite de caracteres",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"//Para validar o status code\r",
							"\r",
							"pm.test(\"Validando o Status code\", function () {\r",
							"    pm.response.to.have.status(400);\r",
							"});\r",
							"\r",
							"\r",
							"\r",
							"\r",
							"//validação correta do texto string 2000 milisegundos\r",
							"pm.test(\"Response time is less than 2000ms\", function () {\r",
							"pm.expect(pm.response.responseTime).to.be.below(2000);\r",
							"\r",
							"\r",
							"//validação para ver se apresenra a mensagem que ultrapassou o limite de caracteres\r",
							"  \r",
							"pm.test(\"Validando o texto esperado\", function () {\r",
							"    pm.expect(pm.response.text()).to.include(\"O campo deve conter até 128 caracteres\");\r",
							"});\r",
							"});"
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "GET",
				"header": [],
				"url": {
					"raw": "{{URLSubcategMari}}?nome= gieuedjdjdkdkkkdkdkdkgkskgsjgsgçsgksdgmsfbladlçbfslblsfblsflsfblsflçbsfkçbçsfbmsflbsflvslbslvlsfvlmsfvadvsfvvfvlçsfvsdvfvsddlvsdd",
					"host": [
						"{{URLSubcategMari}}"
					],
					"query": [
						{
							"key": "nome",
							"value": " gieuedjdjdkdkkkdkdkdkgkskgsjgsgçsgksdgmsfbladlçbfslblsfblsflsfblsflçbsfkçbçsfbmsflbsflvslbslvlsfvlmsfvadvsfvvfvlçsfvsdvfvsddlvsdd"
						}
					]
				}
			},
			"response": []
		},
		{
			"name": "Não colocando o minimo de 3 caracteres",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"//Para validar o status code\r",
							"\r",
							"pm.test(\"Validando o Status code\", function () {\r",
							"    pm.response.to.have.status(400);\r",
							"});\r",
							"\r",
							"\r",
							"\r",
							"\r",
							"//validação correta do texto string 2000 milisegundos\r",
							"pm.test(\"Response time is less than 2000ms\", function () {\r",
							"pm.expect(pm.response.responseTime).to.be.below(2000);\r",
							"\r",
							"\r",
							"//validação para ver se apresenra a mensagem que ultrapassou o limite de caracteres\r",
							"  \r",
							"pm.test(\"Validando o texto esperado\", function () {\r",
							"    pm.expect(pm.response.text()).to.include(\"O campo não pode ter menos que 3 caracteres\");\r",
							"});\r",
							"});"
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "GET",
				"header": [],
				"url": {
					"raw": "{{URLSubcategMari}}?nome=da",
					"host": [
						"{{URLSubcategMari}}"
					],
					"query": [
						{
							"key": "nome",
							"value": "da"
						}
					]
				}
			},
			"response": []
		},
		{
			"name": "Pesquisando em ordem crescente.",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"//Para validar o status code\r",
							"\r",
							"pm.test(\"Validando o Status code\", function () {\r",
							"    pm.response.to.have.status(200);\r",
							"});\r",
							"\r",
							"\r",
							"\r",
							"\r",
							"//validação correta do texto string 2000 milisegundos\r",
							"pm.test(\"Response time is less than 2000ms\", function () {\r",
							"pm.expect(pm.response.responseTime).to.be.below(2000);\r",
							"\r",
							"\r",
							"//validação para ver se apresenra a mensagem que ultrapassou o limite de caracteres\r",
							"  \r",
							"});"
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "GET",
				"header": [],
				"url": {
					"raw": "{{URLSubcategMari}}?crescente=true",
					"host": [
						"{{URLSubcategMari}}"
					],
					"query": [
						{
							"key": "crescente",
							"value": "true"
						}
					]
				}
			},
			"response": []
		},
		{
			"name": "Pesquisando em ordem decrescente",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"//Para validar o status code\r",
							"\r",
							"pm.test(\"Validando o Status code\", function () {\r",
							"    pm.response.to.have.status(200);\r",
							"});\r",
							"\r",
							"\r",
							"\r",
							"\r",
							"//validação correta do texto string 2000 milisegundos\r",
							"pm.test(\"Response time is less than 2000ms\", function () {\r",
							"pm.expect(pm.response.responseTime).to.be.below(2000);\r",
							"\r",
							"\r",
							"//validação para ver se apresenra a mensagem que ultrapassou o limite de caracteres\r",
							"  \r",
							"\r",
							"});"
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "GET",
				"header": [],
				"url": {
					"raw": "{{URLSubcategMari}}?decrescente=true",
					"host": [
						"{{URLSubcategMari}}"
					],
					"query": [
						{
							"key": "decrescente",
							"value": "true"
						}
					]
				}
			},
			"response": []
		},
		{
			"name": "Pesquisar com filtros diferentes",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"//Para validar o status code\r",
							"\r",
							"pm.test(\"Validando o Status code\", function () {\r",
							"    pm.response.to.have.status(200);\r",
							"});\r",
							"\r",
							"\r",
							"\r",
							"\r",
							"//validação correta do texto string 2000 milisegundos\r",
							"pm.test(\"Response time is less than 2000ms\", function () {\r",
							"pm.expect(pm.response.responseTime).to.be.below(2000);\r",
							"\r",
							"\r",
							"//validação para ver se apresenra a mensagem que ultrapassou o limite de caracteres\r",
							"  \r",
							"\r",
							"});"
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "GET",
				"header": [],
				"url": {
					"raw": "{{URLSubcategMari}}?decrescente=false&status=true",
					"host": [
						"{{URLSubcategMari}}"
					],
					"query": [
						{
							"key": "decrescente",
							"value": "false"
						},
						{
							"key": "status",
							"value": "true"
						}
					]
				}
			},
			"response": []
		},
		{
			"name": "Definindo quantos registros exibir por página ",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"//Para validar o status code\r",
							"\r",
							"pm.test(\"Validando o Status code\", function () {\r",
							"    pm.response.to.have.status(200);\r",
							"});\r",
							"\r",
							"\r",
							"\r",
							"\r",
							"//validação correta do texto string 2000 milisegundos\r",
							"pm.test(\"Response time is less than 2000ms\", function () {\r",
							"pm.expect(pm.response.responseTime).to.be.below(2000);\r",
							"\r",
							"\r",
							"//validação para ver se apresenra a mensagem que ultrapassou o limite de caracteres\r",
							"  \r",
							"\r",
							"});"
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "GET",
				"header": [],
				"url": {
					"raw": "{{URLSubcategMari}}?take=3",
					"host": [
						"{{URLSubcategMari}}"
					],
					"query": [
						{
							"key": "take",
							"value": "3"
						}
					]
				}
			},
			"response": []
		}
	]
}